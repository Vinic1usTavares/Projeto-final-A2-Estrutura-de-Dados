an aspect weaver is a utility for aspect oriented languages designed to take instructions specified by aspects isolated representations of significant concepts in a program and generate final implementation code weaver integrates aspects into locations specified by software as a pre compilation step by merging aspects and classes representations of structure of entities in program weaver generates a woven class aspect weavers take instructions known as advice specified through use of pointcuts and join points special segments of code that indicate what methods should be handled by aspect code implementation of aspect then specifies whether related code should be added before after or throughout related methods by doing this aspect weavers improve modularity keeping code in one place that would otherwise have been interspersed throughout various unrelated classes motivation many programming languages are already widely accepted and understood however desire to create radically different programming languages to support aspect oriented programming paradigm is not significant due to business related concerns there are risks associated with adopting new technologies kiczales october 2001 p 2 use of an entirely new language relies on a business s ability to acquire new developers additionally existing code base of a business would need to be discarded finally a business would need to acquire a new toolchain suite of tools for development which is often both an expense in both money and time kiczales october 2001 p 7 primary concerns about for adoption of new technologies tend to be need to train new developers and adapt existing processes to new technology colyer 2003 p 6 to address these business concerns an aspect weaver enables use of widely adopted languages like java with aspect oriented programming through minor adaptations such as aspectj which work with existing tools kiczales october 2001 p 5 instead of developing an entirely new language aspect weaver interprets extensions defined by aspectj and builds woven java code which can then be used by any existing java compiler this ensures that any existing object oriented code will still be valid aspect oriented code and that development will feel like a natural extension of object oriented language kiczales june 2001 p 3 programming language extends c through use of an aspect weaver offering additional efficiency over aspectj that is necessary for embedded systems while still retaining benefits of aspect oriented programming spinczyk 2002 p 1 implementation aspect weavers operate by taking instructions specified by aspects known as advice and distributing it throughout various classes in program automatically result of weaving process is a set of classes with same names as original classes but with additional code injected into classes functions automatically advice specifies exact location and functionality of injected code wand 2004 p 1 through this weaving process aspect weavers allow for code which would have otherwise been duplicated across classes by eliminating this duplication aspect weavers promote modularity of cross cutting concerns wand 2004 p 7 aspects define implementation code which would have otherwise been duplicated and then use pointcuts and join points to define advice during weaving aspect weaver uses pointcuts and join points known as a pointcut designator to identify positions in candidate classes at which implementation should be injected november 2000 p 2 implementation is then injected into classes at points identified thus permitting code to be executed at appropriate times without relying on manual duplication by programmer spinczyk october 2007 p 21 aspect logger pointcut method execution before method system out println entering thisjoinpoint getsignature tostring after method system out println leaving thisjoinpoint getsignature tostring public class foo public void bar system out println executing foo bar public void baz system out println executing foo baz a sample aspect and class defined in aspectj programming class foo public void bar system out println entering foo bar system out println executing foo bar system out println leaving foo bar public void baz system out println entering foo baz system out println executing foo baz system out println leaving foo baz woven class that results from executing an aspect weaver on above sample weaving in aspectj in programming language aspectj pointcuts join points and modularized code are defined in an aspect block similar to that of java classes classes are defined using java syntax weaving process consists of executing aspect advice to produce only a set of generated classes that have aspect implementation code woven into it wang july 2007 p 4 example at right shows a potential implementation of an aspect which logs entry and exit of all methods without an aspect weaver this feature would necessitate duplication of code in class for every method instead entry and exit code is defined solely within aspect 2007 p 2 aspect weaver analyzes advice specified by pointcut in aspect and uses that advice to distribute implementation code into defined class code differs slightly in each method due to slight variances in requirements for method as method identifier has changed aspect weaver determines appropriate code to generate in each situation as defined by implementation advice and then injects it into methods matching specified pointcut hilsdale 2004 pp 5 6 weaving to bytecode instead of generating a set of woven source code some aspectj weavers instead weave aspects and classes together directly into bytecode acting both as aspect weaver and compiler hilsdale 2004 p 2005 p 1 while it is expected that performance of aspect weavers which also perform compilation process will require more computation time due to weaving process involved however bytecode weaving process produces more efficient runtime code than would usually be achieved through compiled woven source run time weaving developments in aspectj have revealed potential to incorporate just in time compilation into execution of aspect oriented code to address performance demands 2003 p 1 at run time an aspect weaver could translate aspects in a more efficient manner than traditional static weaving approaches using aspectj on a java virtual machine dynamic weaving of aspects at run time has been shown to improve code performance by 26 sato september 2003 p 17 while some implementations of just in time virtual machines implement this capability through a new virtual machine some implementations can be designed to use features that already exist in current virtual machines sato september 2003 p 2 requirement of a new virtual machine is contrary to one of original design goals of aspectj to accomplish just in time weaving a change to virtual machine that executes compiled bytecode is necessary a proposed solution for aspectj uses a layered approach which builds upon existing java virtual machine to add support for join point management and callbacks to a dynamic aspect oriented programming engine 2003 p 3 an alternative implementation uses a weaving engine that uses breakpoints to halt execution at pointcut select an appropriate method embed it into application and continue sato september 2003 p 11 use of breakpoints in this manner has been shown to reduce performance due to a very large number of context switches performance aspect weavers performance as well as performance of code that they produce has been a subject of analysis it is preferable that improvement in modularity supplied by aspect weaving does not impact run time performance aspect weavers are able to perform aspect specific optimizations gal 2001 p 3 while traditional optimizations such as elimination of unused special variables from aspect code can be done at compile time some optimizations can only be performed by aspect weaver for example aspectj contains two similar but distinct keywords thisjoinpoint which contains information about this particular instance of woven code and thisjoinpointstaticpart which contains information common to all instances of code relevant to that set of advice optimization of replacing thisjoinpoint with more efficient and static keyword thisjoinpointstaticpart can only be done by aspect weaver by performing this replacement woven program avoids creation of a join point object on every execution studies have shown that unnecessary creation of join point objects in aspectj can lead to a performance overhead of 5 at run time while performance degradation is only approximately 1 when this object is not created colyer 2003 p 2 compile time performance is generally worse in aspect weavers than their traditional compiler counterparts due to additional work necessary for locating methods which match specified pointcuts a study done showed that aspectj compiler ajc is about 34 slower than sun microsystems java 1 3 compiler and about 62 slower than java 1 4 compiler hilsdale 2004 p 7 see also aspect oriented programming compiler references bibliography further reading category aspect oriented programming category aspect oriented software development category compiler construction category programming language implementation category articles with example java code