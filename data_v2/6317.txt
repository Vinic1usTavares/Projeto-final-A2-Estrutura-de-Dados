in computer science 2 satisfiability 2 sat or just 2sat is a computational problem of assigning values to variables each of which has two possible values in order to satisfy a system of constraints on pairs of variables it is a special case of general boolean satisfiability problem which can involve constraints on more than two variables and of constraint satisfaction problems which can allow more than two choices for value of each variable but in contrast to those more general problems which are np complete 2 satisfiability can be solved in polynomial time instances of 2 satisfiability problem are typically expressed as boolean formulas of a special type called conjunctive normal form 2 cnf or krom formulas alternatively they may be expressed as a special type of directed graph implication graph which expresses variables of an instance and their negations as vertices in a graph and constraints on pairs of variables as directed edges both of these kinds of inputs may be solved in linear time either by a method based on backtracking or by using strongly connected components of implication graph resolution a method for combining pairs of constraints to make additional valid constraints also leads to a polynomial time solution 2 satisfiability problems provide one of two major subclasses of conjunctive normal form formulas that can be solved in polynomial time other of two subclasses is horn satisfiability 2 satisfiability may be applied to geometry and visualization problems in which a collection of objects each have two potential locations and goal is to find a placement for each object that avoids overlaps with other objects other applications include clustering data to minimize sum of diameters of clusters classroom and sports scheduling and recovering shapes from information about their cross sections in computational complexity theory 2 satisfiability provides an example of an nl complete problem one that can be solved non using a logarithmic amount of storage and that is among hardest of problems solvable in this resource bound set of all solutions to a 2 satisfiability instance can be given structure of a median graph but counting these solutions is p complete and therefore not expected to have a polynomial time solution random instances undergo a sharp phase transition from solvable to unsolvable instances as ratio of constraints to variables increases past 1 a phenomenon conjectured but unproven for more complicated forms of satisfiability problem a computationally difficult variation of 2 satisfiability finding a truth assignment that maximizes number of satisfied constraints has an approximation algorithm whose optimality depends on unique games conjecture and another difficult variation finding a satisfying assignment minimizing number of true variables is an important test case for parameterized complexity problem representations thumb 300px implication graph for example 2 satisfiability instance shown in this section a 2 satisfiability problem may be described using a boolean expression with a special restricted form it is a conjunction a boolean and operation of clauses where each clause is a disjunction a boolean or operation of two variables or negated variables variables or their negations appearing in this formula are known as literals for example following formula is in conjunctive normal form with seven variables eleven clauses and 22 literals 2 satisfiability problem is to find a truth assignment to these variables that makes whole formula true such an assignment chooses whether to make each of variables true or false so that at least one literal in every clause becomes true for expression shown above one possible satisfying assignment is one that sets all seven of variables to true every clause has at least one non negated variable so this assignment satisfies every clause there are also 15 other ways of setting all variables so that formula becomes true therefore 2 satisfiability instance represented by this expression is satisfiable formulas in this form are known as 2 cnf formulas 2 in this name stands for number of literals per clause and cnf stands for conjunctive normal form a type of boolean expression in form of a conjunction of disjunctions they are also called krom formulas after work of uc davis mathematician r krom whose 1967 paper was one of earliest works on 2 satisfiability problem each clause in a 2 cnf formula is logically equivalent to an implication from one variable or negated variable to other for example second clause in example may be written in any of three equivalent ways because of this equivalence between these different types of operation a 2 satisfiability instance may also be written in implicative normal form in which we replace each or clause in conjunctive normal form by two implications to which it is equivalent a third more graphical way of describing a 2 satisfiability instance is as an implication graph an implication graph is a directed graph in which there is one vertex per variable or negated variable and an edge connecting one vertex to another whenever corresponding variables are related by an implication in implicative normal form of instance an implication graph must be a skew symmetric graph meaning that it has a symmetry that takes each variable to its negation and reverses orientations of all of edges algorithms several algorithms are known for solving 2 satisfiability problem most efficient of them take linear time resolution and transitive closure described following polynomial time decision procedure for solving 2 satisfiability instances suppose that a 2 satisfiability instance contains two clauses that both use same variable x but that x is negated in one clause and not in other then two clauses may be combined to produce a third clause having two other literals in two clauses this third clause must also be satisfied whenever first two clauses are both satisfied for instance we may combine clauses and in this way to produce clause in terms of implicative form of a 2 cnf formula this rule amounts to finding two implications and and inferring by transitivity a third implication krom writes that a formula is consistent if repeated application of this inference rule cannot generate both clauses and for any variable as he proves a 2 cnf formula is satisfiable if and only if it is consistent for if a formula is not consistent it is not possible to satisfy both of two clauses and simultaneously and if it is consistent then formula can be extended by repeatedly adding one clause of form or at a time preserving consistency at each step until it includes such a clause for every variable at each of these extension steps one of these two clauses may always be added while preserving consistency for if not then other clause could be generated using inference rule once all variables have a clause of this form in formula a satisfying assignment of all of variables may be generated by setting a variable to true if formula contains clause and setting it to false if formula contains clause krom was concerned primarily with completeness of systems of inference rules rather than with efficiency of algorithms however his method leads to a polynomial time bound for solving 2 satisfiability problems by grouping together all of clauses that use same variable and applying inference rule to each pair of clauses it is possible to find all inferences that are possible from a given 2 cnf instance and to test whether it is consistent in total time where is number of variables in instance this formula comes from multiplying number of variables by number of pairs of clauses involving a given variable to which inference rule may be applied thus it is possible to determine whether a given 2 cnf instance is satisfiable in time because finding a satisfying assignment using krom s method involves a sequence of consistency checks it would take time quote a faster time bound of for this algorithm based on more careful ordering of its operations nevertheless even this smaller time bound was greatly improved by later linear time algorithms of and in terms of implication graph of 2 satisfiability instance krom s inference rule can be interpreted as constructing transitive closure of graph as observes it can also be seen as an instance of davis putnam algorithm for solving satisfiability problems using principle of resolution its correctness follows from more general correctness of davis putnam algorithm its polynomial time bound follows from fact that each resolution step increases number of clauses in instance which is upper bounded by a quadratic function of number of variables limited backtracking describe a technique involving limited backtracking for solving constraint satisfaction problems with binary variables and pairwise constraints they apply this technique to a problem of classroom scheduling but they also observe that it applies to other problems including 2 sat basic idea of their approach is to build a partial truth assignment one variable at a time certain steps of algorithms are choice points points at which a variable can be given either of two different truth values and later steps in algorithm may cause it to backtrack to one of these choice points however only most recent choice can be backtracked over all choices made earlier than most recent one are permanent initially there is no choice point and all variables are unassigned at each step algorithm chooses variable whose value to set as follows if there is a clause both of whose variables are already set in a way that clause then algorithm backtracks to its most recent choice point undoing assignments it made since that choice and reverses decision made at that choice if there is no choice point or if algorithm has already backtracked over most recent choice point then it aborts search and reports that input 2 cnf formula is unsatisfiable if there is a clause in which one of clause s two variables has already been set and clause could still become either true or false then other variable is set in a way that forces clause to become true in remaining case each clause is either guaranteed to become true no matter how remaining variables are assigned or neither of its two variables has been assigned yet in this case algorithm creates a new choice point and sets any one of unassigned variables to an arbitrarily chosen value intuitively algorithm follows all chains of inference after making each of its choices this either leads to a contradiction and a backtracking step or if no contradiction is derived it follows that choice was a correct one that leads to a satisfying assignment therefore algorithm either correctly finds a satisfying assignment or it correctly determines that input is unsatisfiable even et al did not describe in detail how to implement this algorithm efficiently they state only that by using appropriate data structures in order to find implications of any decision each step of algorithm other than backtracking can be performed quickly however some inputs may cause algorithm to backtrack many times each time performing many steps before backtracking so its overall complexity may be nonlinear to avoid this problem they modify algorithm so that after reaching each choice point it begins simultaneously testing both of two assignments for variable set at choice point spending equal numbers of steps on each of two assignments as soon as test for one of these two assignments would create another choice point other test is stopped so that at any stage of algorithm there are only two branches of backtracking tree that are still being tested in this way total time spent performing two tests for any variable is proportional to number of variables and clauses of input formula whose values are permanently assigned as a result algorithm takes linear time in total strongly connected components found a simpler linear time procedure for solving 2 satisfiability instances based on notion of strongly connected components from graph theory two vertices in a directed graph are said to be strongly connected to each other if there is a directed path from one to other and vice versa this is an equivalence relation and vertices of graph may be partitioned into strongly connected components subsets within which every two vertices are strongly connected there are several efficient linear time algorithms for finding strongly connected components of a graph based on depth first search tarjan s strongly connected components algorithm and path based strong component published by rediscovered in 1999 by harold n and published in each perform a single depth first search kosaraju s algorithm performs two depth first searches but is very simple in terms of implication graph two literals belong to same strongly connected component whenever there exist chains of implications from one literal to other and vice versa therefore two literals must have same value in any satisfying assignment to given 2 satisfiability instance in particular if a variable and its negation both belong to same strongly connected component instance cannot be satisfied because it is impossible to assign both of these literals same value as aspvall et al showed this is a necessary and sufficient condition a 2 cnf formula is satisfiable if and only if there is no variable that belongs to same strongly connected component as its negation this immediately leads to a linear time algorithm for testing satisfiability of 2 cnf formulae simply perform a strong connectivity analysis on implication graph and check that each variable and its negation belong to different components however as aspvall et al also showed it also leads to a linear time algorithm for finding a satisfying assignment when one exists their algorithm performs following steps construct implication graph of instance and find its strongly connected components using any of known linear time algorithms for strong connectivity analysis check whether any strongly connected component contains both a variable and its negation if so report that instance is not satisfiable and halt construct condensation of implication graph a smaller graph that has one vertex for each strongly connected component and an edge from component to component whenever implication graph contains an edge such that belongs to component and belongs to component condensation is automatically a directed acyclic graph and like implication graph from which it was formed it is skew symmetric topologically order vertices of condensation in practice this may be efficiently achieved as a side effect of previous step as components are generated by kosaraju s algorithm in topological order and by tarjan s algorithm in reverse topological order for each component in reverse topological order if its variables do not already have truth assignments set all literals in component to be true this also causes all of literals in complementary component to be set to false due to reverse topological ordering and skew symmetry when a literal is set to true all literals that can be reached from it via a chain of implications will already have been set to true symmetrically when a literal is set to false all literals that lead to it via a chain of implications will themselves already have been set to false therefore truth assignment constructed by this procedure satisfies given formula which also completes proof of correctness of necessary and sufficient condition identified by aspvall et al as aspvall et al show a similar procedure involving topologically ordering strongly connected components of implication graph may also be used to evaluate fully quantified boolean formulae in which formula being quantified is a 2 cnf formula applications conflict free placement of geometric objects a number of exact and approximate algorithms for automatic label placement problem are based on 2 satisfiability this problem concerns placing textual labels on features of a diagram or map typically set of possible locations for each label is highly constrained not only by map itself each label must be near feature it labels and must not obscure other features but by each other every two labels should avoid overlapping each other for otherwise they would become illegible in general finding a label placement that obeys these constraints is an np hard problem however if each feature has only two possible locations for its label say extending to left and to right of feature then label placement may be solved in polynomial time for in this case one may create a 2 satisfiability instance that has a variable for each label and that has a clause for each pair of labels that could overlap preventing them from being assigned overlapping positions if labels are all congruent rectangles corresponding 2 satisfiability instance can be shown to have only linearly many constraints leading to near linear time algorithms for finding a labeling describe a map labeling problem in which each label is a rectangle that may be placed in one of three positions with respect to a line segment that it labels it may have segment as one of its sides or it may be centered on segment they represent these three positions using two binary variables in such a way that again testing existence of a valid labeling becomes a 2 satisfiability problem use 2 satisfiability as part of an approximation algorithm for problem of finding square labels of largest possible size for a given set of points with constraint that each label has one of its corners on point that it labels to find a labeling with a given size they eliminate squares that if doubled would overlap another point and they eliminate points that can be labeled in a way that cannot possibly overlap with another point s label they show that these elimination rules cause remaining points to have only two possible label placements per point allowing a valid label placement if one exists to be found as solution to a 2 satisfiability instance by searching for largest label size that leads to a solvable 2 satisfiability instance they find a valid label placement whose labels are at least half as large as optimal solution that is approximation ratio of their algorithm is at most two similarly if each label is rectangular and must be placed in such a way that point it labels is somewhere along its bottom edge then using 2 satisfiability to find largest label size for which there is a solution in which each label has point on a bottom corner leads to an approximation ratio of at most two similar applications of 2 satisfiability have been made for other geometric placement problems in graph drawing if vertex locations are fixed and each edge must be drawn as a circular arc with one of two possible locations for instance as an arc diagram then problem of choosing which arc to use for each edge in order to avoid crossings is a 2 satisfiability problem with a variable for each edge and a constraint for each pair of placements that would lead to a crossing however in this case it is possible to speed up solution compared to an algorithm that builds and then searches an explicit representation of implication graph by searching graph implicitly in vlsi integrated circuit design if a collection of modules must be connected by wires that can each bend at most once then again there are two possible routes for wires and problem of choosing which of these two routes to use in such a way that all wires can be routed in a single layer of circuit can be solved as a 2 satisfiability instance consider another vlsi design problem question of whether or not to mirror reverse each module in a circuit design this mirror reversal leaves module s operations unchanged but it changes order of points at which input and output signals of module connect to it possibly changing how well module fits into rest of design boros et al consider a simplified version of problem in which modules have already been placed along a single linear channel in which wires between modules must be routed and there is a fixed bound on density of channel maximum number of signals that must pass through any cross section of channel they observe that this version of problem may be solved as a 2 satisfiability instance in which constraints relate orientations of pairs of modules that are directly across channel from each other as a consequence optimal density may also be calculated efficiently by performing a binary search in which each step involves solution of a 2 satisfiability instance data clustering one way of clustering a set of data points in a metric space into two clusters is to choose clusters in such a way as to minimize sum of diameters of clusters where diameter of any single cluster is largest distance between any two of its points this is preferable to minimizing maximum cluster size which may lead to very similar points being assigned to different clusters if target diameters of two clusters are known a clustering that achieves those targets may be found by solving a 2 satisfiability instance instance has one variable per point indicating whether that point belongs to first cluster or second cluster whenever any two points are too far apart from each other for both to belong to same cluster a clause is added to instance that prevents this assignment same method also can be used as a subroutine when individual cluster diameters are unknown to test whether a given sum of diameters can be achieved without knowing individual cluster diameters one may try all maximal pairs of target diameters that add up to at most given sum representing each pair of diameters as a 2 satisfiability instance and using a 2 satisfiability algorithm to determine whether that pair can be realized by a clustering to find optimal sum of diameters one may perform a binary search in which each step is a feasibility test of this type same approach also works to find that optimize other combinations than sums of cluster diameters and that use arbitrary dissimilarity numbers rather than distances in a metric space to measure size of a cluster time bound for this algorithm is dominated by time to solve a sequence of 2 satisfiability instances that are closely related to each other and shows how to solve these related instances more quickly than if they were solved independently from each other leading to a total time bound of for sum of diameters clustering problem scheduling consider a model of classroom scheduling in which a set of n teachers must be scheduled to teach each of m cohorts of students number of hours per week that teacher i spends with cohort j is described by entry rij of a matrix r given as input to problem and each teacher also has a set of hours during which he or she is available to be scheduled as they show problem is np complete even when each teacher has at most three available hours but it can be solved as an instance of 2 satisfiability when each teacher only has two available hours teachers with only a single available hour may easily be eliminated from problem in this problem each variable vij corresponds to an hour that teacher i must spend with cohort j assignment to variable specifies whether that hour is first or second of teacher s available hours and there is a 2 satisfiability clause preventing any conflict of either of two types two cohorts assigned to a teacher at same time as each other or one cohort assigned to two teachers at same time apply 2 satisfiability to a problem of sports scheduling in which pairings of a round robin tournament have already been chosen and games must be assigned to teams stadiums in this problem it is desirable to alternate home and away games to extent possible avoiding breaks in which a team plays two home games in a row or two away games in a row at most two teams can avoid breaks entirely alternating between home and away games no other team can have same home away schedule as these two because then it would be unable to play team with which it had same schedule therefore an optimal schedule has two breakless teams and a single break for every other team once one of breakless teams is chosen one can set up a 2 satisfiability problem in which each variable represents home away assignment for a single team in a single game and constraints enforce properties that any two teams have a consistent assignment for their games that each team have at most one break before and at most one break after game with breakless team and that no team has two breaks therefore testing whether a schedule admits a solution with optimal number of breaks can be done by solving a linear number of 2 satisfiability problems one for each choice of breakless team a similar technique also allows finding schedules in which every team has a single break and maximizing rather than minimizing number of breaks to reduce total mileage traveled by teams discrete tomography thumb 250px example of a nonogram puzzle being solved tomography is process of recovering shapes from their cross sections in discrete tomography a simplified version of problem that has been frequently studied shape to be recovered is a polyomino a subset of squares in two dimensional square lattice and cross sections provide aggregate information about sets of squares in individual rows and columns of lattice for instance in popular nonogram puzzles also known as paint by numbers or set of squares to be determined represents dark pixels in a binary image and input given to puzzle solver tells him or her how many consecutive blocks of dark pixels to include in each row or column of image and how long each of those blocks should be in other forms of digital tomography even less information about each row or column is given only total number of squares rather than number and length of blocks of squares an equivalent version of problem is that we must recover a given 0 1 matrix given only sums of values in each row and in each column of matrix although there exist polynomial time algorithms to find a matrix having given row and column sums solution may be far from unique any in form of a 2 x 2 identity matrix can be complemented without affecting correctness of solution therefore researchers have searched for constraints on shape to be reconstructed that can be used to restrict space of solutions for instance one might assume that shape is connected however testing whether there exists a connected solution is np complete an even more constrained version that is easier to solve is that shape is orthogonally convex having a single contiguous block of squares in each row and column improving several previous solutions showed how to reconstruct connected orthogonally convex shapes efficiently using 2 sat idea of their solution is to guess indexes of rows containing leftmost and rightmost cells of shape to be reconstructed and then to set up a 2 satisfiability problem that tests whether there exists a shape consistent with these guesses and with given row and column sums they use four 2 satisfiability variables for each square that might be part of given shape one to indicate whether it belongs to each of four possible corner regions of shape and they use constraints that force these regions to be disjoint to have desired shapes to form an overall shape with contiguous rows and columns and to have desired row and column sums their algorithm takes time where is smaller of two dimensions of input shape and is larger of two dimensions same method was later extended to orthogonally convex shapes that might be connected only diagonally instead of requiring orthogonal connectivity a part of a solver for full nonogram puzzles used 2 satisfiability to combine information obtained from several other heuristics given a partial solution to puzzle they use dynamic programming within each row or column to determine whether constraints of that row or column force any of its squares to be white or black and whether any two squares in same row or column can be connected by an implication relation they also transform nonogram into a digital tomography problem by replacing sequence of block lengths in each row and column by its sum and use a maximum flow formulation to determine whether this digital tomography problem combining all of rows and columns has any squares whose state can be determined or pairs of squares that can be connected by an implication relation if either of these two heuristics determines value of one of squares it is included in partial solution and same calculations are repeated however if both heuristics fail to set any squares implications found by both of them are combined into a 2 satisfiability problem and a 2 satisfiability solver is used to find squares whose value is fixed by problem after which procedure is again repeated this procedure may or may not succeed in finding a solution but it is guaranteed to run in polynomial time batenburg and report that although most newspaper puzzles do not need its full power both this procedure and a more powerful but slower procedure which combines this 2 satisfiability approach with limited backtracking of are significantly more effective than dynamic programming and flow heuristics without 2 satisfiability when applied to more difficult randomly generated nonograms renamable horn satisfiability next to 2 satisfiability other major subclass of satisfiability problems that can be solved in polynomial time is horn satisfiability in this class of satisfiability problems input is again a formula in conjunctive normal form it can have arbitrarily many literals per clause but at most one positive literal found a generalization of this class renamable horn satisfiability that can still be solved in polynomial time by means of an auxiliary 2 satisfiability instance a formula is renamable horn when it is possible to put it into horn form by replacing some variables by their negations to do so lewis sets up a 2 satisfiability instance with one variable for each variable of renamable horn instance where 2 satisfiability variables indicate whether or not to negate corresponding renamable horn variables in order to produce a horn instance no two variables that appear in same clause of renamable horn instance should appear positively in that clause this constraint on a pair of variables is a 2 satisfiability constraint by finding a satisfying assignment to resulting 2 satisfiability instance lewis shows how to turn any renamable horn instance into a horn instance in polynomial time by breaking up long clauses into multiple smaller clauses and applying a linear time 2 satisfiability algorithm it is possible to reduce this to linear time other applications 2 satisfiability has also been applied to problems of recognizing undirected graphs that can be partitioned into an independent set and a small number of complete bipartite subgraphs inferring business relationships among autonomous subsystems of internet and reconstruction of evolutionary trees complexity and extensions nl completeness a nondeterministic algorithm for determining whether a 2 satisfiability instance is not satisfiable using only a logarithmic amount of memory is easy to describe simply choose nondeterministically a variable v and search nondeterministically for a chain of implications leading from v to its negation and then back to v if such a chain is found instance cannot be satisfiable by immerman szelepcsenyi theorem it is also possible in nondeterministic to verify that a satisfiable 2 satisfiability instance is satisfiable 2 satisfiability is nl complete thm 16 3 meaning that it is one of hardest or most expressive problems in complexity class nl of problems solvable nondeterministically in logarithmic space completeness here means that a deterministic turing machine using only logarithmic space can transform any other problem in nl into an equivalent 2 satisfiability problem analogously to similar results for more well known complexity class np this transformation together with immerman szelepcsenyi theorem allow any problem in nl to be represented as a second order logic formula with a single existentially quantified predicate with clauses limited to length 2 such formulae are known as so krom similarly implicative normal form can be expressed in first order logic with addition of an operator for transitive closure set of all solutions thumb 300px median graph representing all solutions to example 2 satisfiability instance whose implication graph is shown above set of all solutions to a 2 satisfiability instance has structure of a median graph in which an edge corresponds to operation of flipping values of a set of variables that are all constrained to be equal or unequal to each other in particular by following edges in this way one can get from any solution to any other solution conversely any median graph can be represented as set of solutions to a 2 satisfiability instance in this way median of any three solutions is formed by setting each variable to value it holds in majority of three solutions this median always forms another solution to instance describes an algorithm for efficiently listing all solutions to a given 2 satisfiability instance and for solving several related problems there also exist algorithms for finding two satisfying assignments that have maximal hamming distance from each other counting number of satisfying assignments 2sat is problem of counting number of satisfying assignments to a given 2 cnf formula this counting problem is p complete which implies that it is not solvable in polynomial time unless p np moreover there is no fully polynomial randomized approximation scheme for 2sat unless np rp and this even holds when input is restricted to monotone 2 cnf formulas i e 2 cnf formulas in which each literal is a positive occurrence of a variable theorem 57 fastest known algorithm for computing exact number of satisfying assignments to a 2sat formula runs in time random 2 satisfiability instances one can form a 2 satisfiability instance at random for a given number n of variables and m of clauses by choosing each clause uniformly at random from set of all possible two variable clauses when m is small relative to n such an instance will likely be satisfiable but larger values of m have smaller probabilities of being satisfiable more precisely if m n is fixed as a constant a 1 probability of satisfiability tends to a limit as n goes to infinity if a 1 limit is one while if a 1 limit is zero thus problem exhibits a phase transition at a 1 maximum 2 satisfiability thumb 200px per austrin leftmost in 2009 in maximum 2 satisfiability problem max 2 sat input is a formula in conjunctive normal form with two literals per clause and task is to determine maximum number of clauses that can be simultaneously satisfied by an assignment like more general maximum satisfiability problem max 2 sat is np hard proof is by reduction from by formulating max 2 sat as a problem of finding a cut that is a partition of vertices into two subsets maximizing number of edges that have one endpoint in first subset and one endpoint in second in a graph related to implication graph and applying semidefinite programming methods to this cut problem it is possible to find in polynomial time an approximate solution that satisfies at least 0 940 times optimal number of clauses a balanced max 2 sat instance is an instance of max 2 sat where every variable appears positively and negatively with equal weight for this problem austrin has improved approximation ratio to if unique games conjecture is true then it is impossible to approximate max 2 sat balanced or not with an approximation constant better than 0 943 in polynomial time under weaker assumption that p np problem is only known to be within a constant better than 21 22 0 various authors have also explored exponential worst case time bounds for exact solution of max 2 sat instances weighted 2 satisfiability in weighted 2 satisfiability problem w2sat input is an variable 2sat instance and an integer and problem is to decide whether there exists a satisfying assignment in which at most of variables are true w2sat problem includes as a special case vertex cover problem of finding a set of vertices that together touch all edges of a given undirected graph for any given instance of vertex cover problem one can construct an equivalent w2sat problem with a variable for each vertex of a graph each edge of graph may be represented by a 2sat clause that can be satisfied only by including either or among true variables of solution then satisfying instances of resulting 2sat formula encode solutions to vertex cover problem and there is a satisfying assignment with true variables if and only if there is a vertex cover with vertices therefore like vertex cover w2sat is np complete moreover in parameterized complexity w2sat provides a natural w 1 complete problem which implies that w2sat is not fixed parameter tractable unless this holds for all problems in w 1 that is it is unlikely that there exists an algorithm for w2sat whose running time takes form even more strongly w2sat cannot be solved in time unless exponential time hypothesis fails quantified boolean formulae as well as finding first polynomial time algorithm for 2 satisfiability also formulated problem of evaluating fully quantified boolean formulae in which formula being quantified is a 2 cnf formula 2 satisfiability problem is special case of this quantified 2 cnf problem in which all quantifiers are existential krom also developed an effective decision procedure for these formulae showed that it can be solved in linear time by an extension of their technique of strongly connected components and topological ordering many valued logics 2 satisfiability problem can also be asked for propositional many valued logics algorithms are not usually linear and for some logics problem is even np complete see for surveys see in particular p 373 references category nl complete problems category satisfiability problems