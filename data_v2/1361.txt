dragonfly bsd is a free and open source unix like operating system forked from freebsd 4 8 matthew dillon an amiga developer in late 1980s and early 1990s and freebsd developer between 1994 and 2003 began working on dragonfly bsd in june 2003 and announced it on freebsd mailing lists on 16 july 2003 dillon started dragonfly in belief that techniques adopted for threading and symmetric multiprocessing in freebsd 5 would lead to poor performance and maintenance problems he sought to correct these anticipated problems within freebsd project due to conflicts with other freebsd developers over implementation of his ideas his ability to directly change codebase was eventually revoked despite this dragonfly bsd and freebsd projects still work together sharing bug fixes driver updates and other improvements intended as logical continuation of freebsd 4 x series dragonfly has diverged significantly from freebsd implementing lightweight kernel threads lwkt an in kernel message passing system and hammer file system many design concepts were influenced by system design kernel kernel messaging subsystem being developed is similar to those found in such as mach though it is less complex by design however dragonfly uses a monolithic kernel system dragonfly s messaging subsystem has ability to act in either a synchronous or asynchronous fashion and attempts to use this capability to achieve best performance possible in any given situation according to developer matthew dillon progress is being made to provide both device input output i o and virtual file system vfs messaging capabilities that will enable remainder of project goals to be met new infrastructure will allow many parts of kernel to be migrated out into userspace here they will be more easily debugged as they will be smaller isolated programs instead of being small parts entwined in a larger chunk of code additionally migration of select kernel code into userspace has benefit of making system more robust if a userspace driver crashes it will not crash kernel system calls are being split into userland and kernel versions and being encapsulated into messages this will help reduce size and complexity of kernel by moving variants of standard system calls into a userland compatibility layer and help maintain forwards and backwards compatibility between dragonfly versions linux and other unix like os compatibility code is being migrated out similarly threading as support for multiple instruction set architectures complicates symmetric multiprocessing smp support dragonfly bsd now limits its support to x86 64 platform dragonfly originally ran on x86 architecture however as of version 4 0 it is no longer supported since version 1 10 dragonfly supports 1 1 userland threading one kernel thread per userland thread which is regarded as a relatively simple solution that is also easy to maintain inherited from freebsd dragonfly also supports multi threading in dragonfly each cpu has its own thread scheduler upon creation threads are assigned to processors and are never preemptively switched from one processor to another they are only migrated by passing of an inter processor interrupt ipi message between cpus involved inter processor thread scheduling is also accomplished by sending asynchronous ipi messages one advantage to this clean compartmentalization of threading subsystem is that processors on board caches in symmetric multiprocessor systems do not contain duplicated data allowing for higher performance by giving each processor in system ability to use its own cache to store different things to work on lwkt subsystem is being employed to partition work among multiple kernel threads for example in networking code there is one thread per protocol per processor reducing competition by removing need to share certain resources among various kernel tasks shared resources protection in order to run safely on multiprocessor machines access to shared resources like files data structures must be serialized so that threads or processes do not attempt to modify same resource at same time in order to prevent multiple threads from accessing or modifying a shared resource simultaneously dragonfly employs critical sections and serializing tokens to prevent concurrent access while both linux and freebsd 5 employ fine grained mutex models to achieve higher performance on multiprocessor systems dragonfly does not until recently dragonfly also employed but these were replaced with critical sections much of system s core including lwkt subsystem ipi messaging subsystem and new kernel memory allocator are lockless meaning that they work without using mutexes with each process operating on a single cpu critical sections are used to protect against local interrupts individually for each cpu guaranteeing that a thread currently being executed will not be preempted serializing tokens are used to prevent concurrent accesses from other cpus and may be held simultaneously by multiple threads ensuring that only one of those threads is running at any given time blocked or sleeping threads therefore do not prevent other threads from accessing shared resource unlike a thread that is holding a mutex among other things use of serializing tokens prevents many of situations that could result in deadlocks and priority inversions when using mutexes as well as greatly simplifying design and implementation of a many step procedure that would require a resource to be shared among multiple threads serializing token code is evolving into something quite similar to read copy update feature now available in linux unlike linux s current implementation dragonfly s is being implemented such that only processors competing for same token are affected rather than all processors in computer dragonfly switched to multiprocessor safe slab allocator which requires neither mutexes nor blocking operations for memory assignment tasks it was eventually ported into standard c library in userland where it replaced freebsd s malloc implementation virtual kernel since release 1 8 dragonfly has a virtualization mechanism similar to user mode linux allowing a user to run another kernel in userland virtual kernel vkernel is run in completely isolated environment with emulated network and storage interfaces thus simplifying testing kernel subsystems and clustering features vkernel has two important differences from real kernel it lacks many routines for dealing with low level hardware management and it uses c standard library libc functions in place of in kernel implementations wherever possible as both real and virtual kernel are compiled from same code base this effectively means that platform dependent routines and re implementations of libc functions are clearly separated in a source tree vkernel runs on top of hardware abstractions provided by real kernel these include based timer console mapped to virtual terminal where vkernel is executed disk image and virtual kernel ethernet device tunneling all packets to host s tap interface package management third party software is available on dragonfly as binary packages via or from a native ports collection dports dragonfly originally used freebsd ports collection as its official package management system but starting with 1 4 release switched to netbsd s pkgsrc system which was perceived as a way of lessening amount of work needed for third party software availability eventually maintaining compatibility with pkgsrc proved to require more effort than was initially anticipated so project created dports an overlay on top of freebsd ports collection carp support initial implementation of common address redundancy protocol commonly referred to as carp was finished in march 2007 as of 2011 carp support is integrated into dragonfly bsd hammer file systems alongside unix file system which is typically default file system on bsds dragonfly bsd supports hammer and hammer2 file systems hammer2 is default file system as of version 5 2 0 hammer was developed specifically for dragonfly bsd to provide a feature rich yet better designed analogue of increasingly popular hammer supports configurable file system history snapshots data deduplication and other features typical for file systems of its kind hammer2 successor of hammer file system is now considered stable used by default and focus of further development plans for its development were initially shared in 2012 in 2017 dillon announced that next dragonfly bsd version 5 0 0 would include a usable though still experimental version of hammer2 and described features of design with release after 5 0 0 version 5 2 0 hammer2 became new default file system devfs in 2007 dragonfly bsd received a new device file system devfs which dynamically adds and removes device nodes allows accessing devices by connection paths recognises drives by serial numbers and removes need for pre populated dev file system hierarchy it was implemented as a google summer of code 2009 project application snapshots dragonfly bsd supports amiga style resident applications feature it takes a snapshot of a large dynamically linked program s virtual memory space after loading allowing future instances of program to start much more quickly than it otherwise would have this replaces capability that was being worked on earlier in project s history as resident support is much more efficient large programs like those found in software compilation with many shared libraries will benefit most from this support development and distribution as with freebsd and developers of dragonfly bsd are slowly replacing pre function prototype style c code with more modern ansi equivalents similar to other operating systems dragonfly s version of gnu compiler collection has an enhancement called stack smashing protector enabled by default providing some additional protection against buffer overflow based attacks kernel is no longer built with this protection by default being a derivative of freebsd dragonfly has inherited an easy to use integrated build system that can rebuild entire base system from source with only a few commands dragonfly developers use git version control system to manage changes to dragonfly source code unlike its parent freebsd dragonfly has both stable and unstable releases in a single source tree due to a smaller developer base like other bsd kernels and those of most modern operating systems dragonfly employs a built in kernel debugger to help developers find kernel bugs furthermore a debug kernel which makes bug reports more useful for tracking down kernel related problems is installed by default at expense of a relatively small quantity of disk space when a new kernel is installed backup copy of previous kernel and its modules are stripped of their debugging symbols to further minimize disk space usage distribution media operating system is distributed as a live cd and live usb full x11 flavour available that boots into a complete dragonfly system it includes base system and a complete set of manual pages and may include source code and useful packages in future versions advantage of this is that with a single cd you can install software onto a computer use a full set of tools to repair a damaged installation or demonstrate capabilities of system without installing it daily snapshots are available from master site for those who want to install most recent versions of dragonfly without building from source like other free open source bsds dragonfly is distributed under terms of modern version of bsd license release history version date changes 5 6 improved virtual memory system updates to radeon and ttm performance improvements for hammer2 5 4 updated drivers for network virtual machines display gcc 8 0 with previous gcc releases hammer with more issue fixes 5 2 hammer2 filesystem is now considered stable meltdown and spectre mitigation support ipfw updates improved graphics support 5 0 new hammer2 filesystem can now support over 900 000 processes on a single machine improved i915 support ipfw better performance 4 8 initial amd ryzen support improved i915 support improved kernel performance boot support replaced in base gcc 5 4 1 lto support initial clang framework uefi install support 4 6 improved i915 and radeon support express support improved smp performance improved network performance preliminary support for uefi booting imported from freebsd amd removed 4 4 gcc 5 2 gold now default linker improved i915 and radeon support complete overhaul of locale system collation support for named locales library replaced with tre symbol support in libc numerous hammer cleanups and fixes 4 2 gcc 5 1 1 improved i915 and radeon support improved sound support improved support for memory controller and temperature sensors path mtu discovery enabled by default support removed replaced by dma gnu info pages removed 4 0 non locking multi threading pf related networking better threaded for improved throughput security feature in kernel support for up to 256 cpus improved wireless networking support rust and free pascal now supported i915 support greatly improved gcc 4 7 4 3 8 dynamic root and pam support usb4bsd now default native c state support for intel cpus tcp port token split for better tcp connect 2 performance gcc 4 7 3 hammer2 in system not ready for production use final 32 bit release 3 6 smp contention reduction kernel for intel and amd gpus hardware acceleration for intel gpus up to ivy bridge 3 4 new package manager dports introduced gcc 4 7 improved cpu usage and tmpfs performance under extreme load 3 2 multiprocessor capable kernel became mandatory performance improvements in scheduler usb4bsd imported from freebsd puffs imported from netbsd 3 0 multiprocessor capable kernel became default hammer performance improvements compatible encryption support dm crypt replaced with a compatible bsd licensed library enhanced posix compatibility device driver for ecc memory major network protocol stack and smp improvements acpi related improvements 2 10 giant lock removed from every area except virtual memory subsystem hammer deduplication gcc 4 4 bridging system rewritten major performance improvements 2 8 wi fi stack imported from freebsd logical volume management dm crypt new disk scheduler reduced giant lock usage 2 6 tmpfs imported from netbsd hammer and general i o improvements 2 4 devfs new ahci driver including full support nfs improvements full x86 64 support 2 2 hammer officially production ready major stability improvements new release media livecd and 2 0 major hammer improvements 1 12 sensor framework imported from freebsd bluetooth stack gcc 4 1 dragonfly mail agent dma a stub mta support for 386 cpu dropped preliminary x86 64 support not functional experimental hammer support 1 10 userland threading system advanced host controller interface support guid partition table support 1 8 virtual kernel implementation 1 6 new random number generator ieee 802 11 framework major giant lock clustering and userland vfs improvements major stability improvements 1 4 gcc 3 4 pkgsrc used by default citrus imported from netbsd 1 2 tcp sack tcp performance tuning and pf thread local storage console over ieee 1394 infrastructure rewritten x11 support pkgsrc support 1 0 technology showcase new bsd installer lwkt subsystem and lightweight ports messaging system mostly mp safe networking stack lockless memory allocator variant application checkpointing support see also comparison of bsd operating systems comparison of open source operating systems comparison of operating system kernels references external links category 2004 software category berkeley software distribution category free software operating systems category operating system distributions bootable from read only media category software forks category software using bsd license category unix variants category x86 operating systems