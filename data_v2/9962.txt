thumb upright 1 35 brute force algorithm finds a 4 clique in this 7 vertex graph complement of 7 vertex path graph by systematically checking all c 7 4 35 4 vertex subgraphs for completeness in computer science clique problem is computational problem of finding cliques subsets of vertices all adjacent to each other also called complete subgraphs in a graph it has several different formulations depending on which cliques and what information about cliques should be found common formulations of clique problem include finding a maximum clique a clique with largest possible number of vertices finding a maximum weight clique in a weighted graph listing all maximal cliques cliques that cannot be enlarged and solving decision problem of testing whether a graph contains a clique larger than a given size clique problem arises in following real world setting consider a social network where graph s vertices represent people and graph s edges represent mutual acquaintance then a clique represents a subset of people who all know each other and algorithms for finding cliques can be used to discover these groups of mutual friends along with its applications in social networks clique problem also has many applications in bioinformatics computational chemistry and motion segmentation most versions of clique problem are hard clique decision problem is np complete one of karp s 21 np complete problems problem of finding maximum clique is both fixed parameter intractable and hard to approximate and listing all maximal cliques may require exponential time as there exist graphs with exponentially many maximal cliques therefore much of theory about clique problem is devoted to identifying special types of graph that admit more efficient algorithms or to establishing computational difficulty of general problem in various models of computation to find a maximum clique one can systematically inspect all subsets but this sort of brute force search is too time consuming to be practical for networks comprising more than a few dozen vertices although no polynomial time algorithm is known for this problem more efficient algorithms than brute force search are known for instance bron kerbosch algorithm can be used to list all maximal cliques in worst case optimal time and it is also possible to list them in polynomial time per clique history and applications study of complete subgraphs in mathematics predates clique terminology for instance complete subgraphs make an early appearance in mathematical literature in graph theoretic reformulation of ramsey theory by but term clique and problem of algorithmically listing cliques both come from social sciences where complete subgraphs are used to model social cliques groups of people who all know each other used graphs to model social networks and adapted social science terminology to graph theory they were first to call complete subgraphs cliques first algorithm for solving clique problem is that of who were motivated by sociological application social science researchers have also defined various other types of cliques and maximal cliques in social network cohesive subgroups of people or actors in network all of whom share one of several different kinds of connectivity relation many of these generalized notions of cliques can also be found by constructing an undirected graph whose edges represent related pairs of actors from social network and then applying an algorithm for clique problem to this graph since work of and ross many others have devised algorithms for various versions of clique problem in 1970s researchers began studying these algorithms from point of view of worst case analysis see for instance an early work on worst case complexity of maximum clique problem also in 1970s beginning with work of and researchers began using theory of np completeness and related intractability results to provide a mathematical explanation for perceived difficulty of clique problem in 1990s a breakthrough series of papers beginning with and reported in new york times showed that assuming p np it is not even possible to approximate problem accurately and efficiently clique finding algorithms have been used in chemistry to find chemicals that match a target structure and to model molecular docking and binding sites of chemical reactions they can also be used to find similar structures within different molecules see in particular pp 35 36 in these applications one forms a graph in which each vertex represents a matched pair of atoms one from each of two molecules two vertices are connected by an edge if matches that they represent are compatible with each other being compatible may mean for instance that distances between atoms within two molecules are approximately equal to within some given tolerance a clique in this graph represents a set of matched pairs of atoms in which all matches are compatible with each other see in particular pp 6 7 a special case of this method is use of modular product of graphs to reduce problem of finding maximum common induced subgraph of two graphs to problem of finding a maximum clique in their product in automatic test pattern generation finding cliques can help to bound size of a test set in bioinformatics clique finding algorithms have been used to infer evolutionary trees predict protein structures and find closely interacting clusters of proteins listing cliques in a dependency graph is an important step in analysis of certain random processes in mathematics keller s conjecture on face to face tiling of hypercubes was disproved by who used a clique finding algorithm on an associated graph to find a counterexample keller graph used by has vertices and clique size 1024 they described a synthetic construction for clique but also used clique finding algorithms on smaller graphs to help guide their search simplified proof by finding a clique of size 256 in a vertex keller graph definitions thumb graph shown has one maximum clique triangle 1 2 5 and four more maximal cliques pairs 2 3 3 4 4 5 and 4 6 an undirected graph is formed by a finite set of vertices and a set of unordered pairs of vertices which are called edges by convention in algorithm analysis number of vertices in graph is denoted by and number of edges is denoted by a clique in a graph is a complete subgraph of that is it is a subset of vertices such that every two vertices in are two endpoints of an edge in a maximal clique is a clique to which no more vertices can be added for each vertex that is not part of a maximal clique there must be another vertex that is in clique and non adjacent to preventing from being added to clique a maximum clique is a clique that includes largest possible number of vertices clique number is number of vertices in a maximum clique of several closely related clique finding problems have been studied in maximum clique problem input is an undirected graph and output is a maximum clique in graph if there are multiple maximum cliques one of them may be chosen arbitrarily in weighted maximum clique problem input is an undirected graph with weights on its vertices or less frequently edges and output is a clique with maximum total weight maximum clique problem is special case in which all weights are equal as well as problem of optimizing sum of weights other more complicated optimization problems have also been studied in maximal clique listing problem input is an undirected graph and output is a list of all its maximal cliques maximum clique problem may be solved using as a subroutine an algorithm for maximal clique listing problem because maximum clique must be included among all maximal cliques in clique problem input is an undirected graph and a number output is a clique with vertices if one exists or a special value indicating that there is no clique otherwise in some variations of this problem output should list all cliques of size in clique decision problem input is an undirected graph and a number and output is a boolean value true if graph contains a clique and false otherwise first four of these problems are all important in practical applications clique decision problem is not of practical importance it is formulated in this way in order to apply theory of np completeness to clique finding problems clique problem and independent set problem are complementary a clique in is an independent set in complement graph of and vice versa exercise 34 1 p 1018 therefore many computational results may be applied equally well to either problem and some research papers do not clearly distinguish between two problems however two problems have different properties when applied to restricted families of graphs for instance clique problem may be solved in polynomial time for planar graphs while independent set problem remains np hard on planar graphs algorithms finding a single maximal clique a maximal clique sometimes called inclusion maximal is a clique that is not included in a larger clique therefore every clique is contained in a maximal clique see e g maximal cliques can be very small a graph may contain a non maximal clique with many vertices and a separate clique of size 2 which is maximal while a maximum i e largest clique is necessarily maximal converse does not hold there are some types of graphs in which every maximal clique is maximum these are complements of well covered graphs in which every maximal independent set is maximum however other graphs have maximal cliques that are not maximum a single maximal clique can be found by a straightforward greedy algorithm starting with an arbitrary clique for instance any single vertex or even empty set grow current clique one vertex at a time by looping through graph s remaining vertices for each vertex that this loop examines add to clique if it is adjacent to every vertex that is already in clique and discard otherwise this algorithm runs in linear time p 526 because of ease of finding maximal cliques and their potential small size more attention has been given to much harder algorithmic problem of finding a maximum or otherwise large clique than has been given to problem of finding a single maximal clique however some research in parallel algorithms has studied problem of finding a maximal clique in particular problem of finding lexicographically first maximal clique one found by algorithm above has been shown to be complete for class of polynomial time functions this result implies that problem is unlikely to be solvable within parallel complexity class nc cliques of fixed size one can test whether a graph contains a vertex clique and find any such clique that it contains using a brute force algorithm this algorithm examines each subgraph with vertices and checks to see whether it forms a clique it takes time as expressed using big o notation this is because there are subgraphs to check each of which has edges whose presence in needs to be checked thus problem may be solved in polynomial time whenever is a fixed constant however when does not have a fixed value but instead may vary as part of input to problem time is exponential e g see simplest nontrivial case of clique finding problem is finding a triangle in a graph or equivalently determining whether graph is triangle free in a graph with edges there may be at most triangles using big theta notation to indicate that this bound is tight worst case for this formula occurs when is itself a clique therefore algorithms for listing all triangles must take at least time in worst case using big omega notation and algorithms are known that match this time bound provide an algorithm with running time that finds a triangle if one exists but does not list all triangles list all triangles in time for instance describe an algorithm that sorts vertices in order from highest degree to lowest and then through each vertex in sorted list looking for triangles that include and do not include any previous vertex in list to do so algorithm marks all neighbors of searches through all edges incident to a neighbor of outputting a triangle for every edge that has two marked endpoints and then removes marks and deletes from graph as authors show time for this algorithm is proportional to arboricity of graph denoted multiplied by number of edges which is since arboricity is at most this algorithm runs in time more generally all vertex cliques can be listed by a similar algorithm that takes time proportional to number of edges multiplied by arboricity to power for graphs of constant arboricity such as planar graphs or in general graphs from any non trivial minor closed graph family this algorithm takes time which is optimal since it is linear in size of input if one desires only a single triangle or an assurance that graph is triangle free faster algorithms are possible as observe graph contains a triangle if and only if its adjacency matrix and square of adjacency matrix contain nonzero entries in same cell therefore fast matrix multiplication techniques such as algorithm can be applied to find triangles in time used fast matrix multiplication to improve algorithm for finding triangles to these algorithms based on fast matrix multiplication have also been extended to problems of finding cliques for larger values of listing all maximal cliques by a result of every vertex graph has at most maximal cliques they can be listed by bron kerbosch algorithm a recursive backtracking procedure of main recursive subroutine of this procedure has three arguments a partially constructed non maximal clique a set of candidate vertices that could be added to clique and another set of vertices that should not be added because doing so would lead to a clique that has already been found algorithm tries adding candidate vertices one by one to partial clique making a recursive call for each one after trying each of these vertices it moves it to set of vertices that should not be added again variants of this algorithm can be shown to have worst case running time matching number of cliques that might need to be listed therefore this provides a worst case optimal solution to problem of listing all maximal cliques further bron kerbosch algorithm has been widely reported as being faster in practice than its alternatives however when number of cliques is significantly smaller than its worst case other algorithms might be preferable as showed it is also possible to list all maximal cliques in a graph in an amount of time that is polynomial per generated clique an algorithm such as theirs in which running time depends on output size is known as an output sensitive algorithm their algorithm is based on following two observations relating maximal cliques of given graph to maximal cliques of a graph formed by removing an arbitrary vertex from for every maximal clique of either continues to form a maximal clique in or forms a maximal clique in therefore has at least as many maximal cliques as does each maximal clique in that does not contain is a maximal clique in and each maximal clique in that does contain can be formed from a maximal clique in by adding and removing non neighbors of from using these observations they can generate all maximal cliques in by a recursive algorithm that chooses a vertex arbitrarily and then for each maximal clique in outputs both and clique formed by adding to and removing non neighbors of however some cliques of may be generated in this way from more than one parent clique of so they eliminate duplicates by outputting a clique in only when its parent in is lexicographically maximum among all possible parent cliques on basis of this principle they show that all maximal cliques in may be generated in time per clique where is number of edges in and is number of vertices improve this to per clique where is arboricity of given graph provide an alternative output sensitive algorithm based on fast matrix multiplication show that it is even possible to list all maximal cliques in order with polynomial delay per clique however choice of ordering is important for efficiency of this algorithm for reverse of this order there is no polynomial delay algorithm unless p np on basis of this result it is possible to list all maximal cliques in polynomial time for families of graphs in which number of cliques is bounded these families include chordal graphs complete graphs triangle free graphs interval graphs graphs of bounded and planar graphs in particular planar graphs have cliques of at most constant size that can be listed in linear time same is true for any family of graphs that is both sparse having a number of edges at most a constant times number of vertices and closed under operation of taking subgraphs finding maximum cliques in arbitrary graphs it is possible to find maximum clique or clique number of an arbitrary n vertex graph in time by using one of algorithms described above to list all maximal cliques in graph and returning largest one however for this variant of clique problem better worst case time bounds are possible algorithm of solves this problem in time it is a recursive backtracking scheme similar to that of bron kerbosch algorithm but is able to eliminate some recursive calls when it can be shown that cliques found within call will be suboptimal improved time to and improved it to time at expense of greater space usage robson s algorithm combines a similar backtracking scheme with a more complicated case analysis and a dynamic programming technique in which optimal solution is for all small connected subgraphs of complement graph these partial solutions are used to shortcut backtracking recursion fastest algorithm known today is a refined version of this method by which runs in time there has also been extensive research on heuristic algorithms for solving maximum clique problems without worst case runtime guarantees based on methods including branch and bound local search greedy algorithms and constraint programming non standard computing methodologies that have been suggested for finding cliques include dna computing although title refers to maximal cliques problem this paper solves is actually maximum clique problem and adiabatic quantum computation maximum clique problem was subject of an implementation challenge sponsored by dimacs in 1992 1993 and a collection of graphs used as benchmarks for challenge which is publicly available dimacs challenge graphs for clique problem accessed 2009 12 17 special classes of graphs thumb in this permutation graph maximum cliques correspond to longest decreasing 4 3 1 and 4 3 2 of defining permutation planar graphs and other families of sparse graphs have been discussed above they have linearly many maximal cliques of bounded size that can be listed in linear time in particular for planar graphs any clique can have at most four vertices by kuratowski s theorem perfect graphs are defined by properties that their clique number equals their chromatic number and that this equality holds also in each of their induced subgraphs for perfect graphs it is possible to find a maximum clique in polynomial time using an algorithm based on semidefinite programming however this method is complex and non combinatorial and specialized clique finding algorithms have been developed for many subclasses of perfect graphs in complement graphs of bipartite graphs konig s theorem allows maximum clique problem to be solved using techniques for matching in another class of perfect graphs permutation graphs a maximum clique is a longest decreasing subsequence of permutation defining graph and can be found using known algorithms for longest decreasing subsequence problem conversely every instance of longest decreasing subsequence problem can be described equivalently as a problem of finding a maximum clique in a permutation graph p 159 provide an alternative quadratic time algorithm for maximum cliques in comparability graphs a broader class of perfect graphs that includes permutation graphs as a special case in chordal graphs maximal cliques can be found by listing vertices in an elimination ordering and checking clique neighborhoods of each vertex in this ordering lemma 4 5 p 19 in some cases these algorithms can be extended to other non perfect classes of graphs as well for instance in a circle graph neighborhood of each vertex is a permutation graph so a maximum clique in a circle graph can be found by applying permutation graph algorithm to each neighborhood p 247 similarly in a unit disk graph with a known geometric representation there is a polynomial time algorithm for maximum cliques based on applying algorithm for complements of bipartite graphs to shared neighborhoods of pairs of vertices algorithmic problem of finding a maximum clique in a random graph drawn from erdos renyi model in which each edge appears with probability independently from other edges was suggested by because maximum clique in a random graph has logarithmic size with high probability it can be found by a brute force search in expected time this is a quasi polynomial time bound although clique number of such graphs is usually very close to simple greedy algorithms as well as more sophisticated randomized approximation techniques only find cliques with size half as big number of maximal cliques in such graphs is with high probability exponential in which prevents methods that list all maximal cliques from running in polynomial time because of difficulty of this problem several authors have investigated planted clique problem clique problem on random graphs that have been augmented by adding large cliques example 18 2 pp 362 363 while spectral methods and semidefinite programming can detect hidden cliques of size no polynomial time algorithms are currently known to detect those of size expressed using little o notation approximation algorithms several authors have considered approximation algorithms that attempt to find a clique or independent set that although not maximum has size as close to maximum as can be found in polynomial time although much of this work has focused on independent sets in sparse graphs a case that does not make sense for complementary clique problem there has also been work on approximation algorithms that do not use such sparsity assumptions describes a polynomial time algorithm that finds a clique of size in any graph that has clique number for any constant by using this algorithm when clique number of a given input graph is between and switching to a different algorithm of for graphs with higher clique numbers and choosing a two vertex clique if both algorithms fail to find anything feige provides an approximation algorithm that finds a clique with a number of vertices within a factor of of maximum although approximation ratio of this algorithm is weak it is best known to date in terms of number of vertices in graphs feige shows currently known best approximation ratio liu et al are writing about maximum independent set but for purposes of approximation there is no difference between two problems results on hardness of approximation described below suggest that there can be no approximation algorithm with an approximation ratio significantly less than linear lower bounds np completeness thumb 3 cnf satisfiability instance x x y x y y x y y reduced to clique green vertices form a 3 clique and correspond to a satisfying assignment adapted from clique decision problem is np complete it was one of richard karp s original 21 problems shown np complete in his 1972 paper among combinatorial problems this problem was also mentioned in stephen cook s paper introducing theory of np complete problems because of hardness of decision problem problem of finding a maximum clique is also np hard if one could solve it one could also solve decision problem by comparing size of maximum clique to size parameter given as input in decision problem karp s np completeness proof is a many one reduction from boolean satisfiability problem it describes how to translate boolean formulas in conjunctive normal form cnf into equivalent instances of maximum clique problem gives essentially same reduction from 3 sat instead of satisfiability to show that subgraph isomorphism is np complete satisfiability in turn was proved np complete in cook levin theorem from a given cnf formula karp forms a graph that has a vertex for every pair where is a variable or its negation and is a clause in formula that contains two of these vertices are connected by an edge if they represent compatible variable assignments for different clauses that is there is an edge from to whenever and and are not each other s negations if denotes number of clauses in cnf formula then vertex cliques in this graph represent consistent ways of assigning truth values to some of its variables in order to satisfy formula therefore formula is satisfiable if and only if a vertex clique exists some np complete problems such as travelling salesman problem in planar graphs may be solved in time that is exponential in a function of input size parameter significantly faster than a brute force search however it is unlikely that such a subexponential time bound is possible for clique problem in arbitrary graphs as it would imply similarly subexponential bounds for many other standard np complete problems circuit complexity thumb a monotone circuit to detect a clique in an vertex graph for and each input to circuit encodes presence or absence of a particular red edge in graph circuit uses one internal and gate to detect each potential clique computational difficulty of clique problem has led it to be used to prove several lower bounds in circuit complexity existence of a clique of a given size is a monotone graph property meaning that if a clique exists in a given graph it will exist in any supergraph because this property is monotone there must exist a monotone circuit using only and gates and or gates to solve clique decision problem for a given fixed clique size however size of these circuits can be proven to be a super polynomial function of number of vertices and clique size exponential in cube root of number of vertices for earlier and weaker bounds on monotone circuits for clique problem see and even if a small number of not gates are allowed complexity remains additionally depth of a monotone circuit for clique problem using gates of bounded fan in must be at least a polynomial in clique size used communication complexity to prove this result decision tree complexity thumb a simple decision tree to detect presence of a 3 clique in a 4 vertex graph it uses up to 6 questions of form does red edge exist matching optimal bound n n 1 2 deterministic decision tree complexity of determining a graph property is number of questions of form is there an edge between vertex and vertex that have to be answered in worst case to determine whether a graph has a particular property that is it is minimum height of a boolean decision tree for problem there are possible questions to be asked therefore any graph property can be determined with at most questions it is also possible to define random and quantum decision tree complexity of a property expected number of questions for a worst case input that a randomized or quantum algorithm needs to have answered in order to correctly determine whether given graph has property see chapter 12 decision trees pp 259 269 because property of containing a clique is monotone it is covered by aanderaa karp rosenberg conjecture which states that deterministic decision tree complexity of determining any non trivial monotone graph property is exactly for arbitrary monotone graph properties this conjecture remains unproven however for deterministic decision trees and for any in range property of containing a clique was shown to have decision tree complexity exactly by deterministic decision trees also require exponential size to detect cliques or large polynomial size to detect cliques of bounded size aanderaa karp rosenberg conjecture also states that randomized decision tree complexity of non trivial monotone functions is conjecture again remains unproven but has been resolved for property of containing a clique for this property is known to have randomized decision tree complexity for instance this follows from for quantum decision trees best known lower bound is but no matching algorithm is known for case of fixed parameter intractability parameterized complexity is complexity theoretic study of problems that are naturally equipped with a small integer parameter and for which problem becomes more difficult as increases such as finding cliques in graphs a problem is said to be fixed parameter tractable if there is an algorithm for solving it on inputs of size and a function such that algorithm runs in time that is it is fixed parameter tractable if it can be solved in polynomial time for any fixed value of and moreover if exponent of polynomial does not depend on technically there is usually an additional requirement that be a function for finding vertex cliques brute force search algorithm has running time because exponent of depends on this algorithm is not fixed parameter tractable although it can be improved by fast matrix multiplication running time still has an exponent that is linear in thus although running time of known algorithms for clique problem is polynomial for any fixed these algorithms do not suffice for fixed parameter tractability defined a hierarchy of parametrized problems w hierarchy that they conjectured did not have fixed parameter tractable algorithms they proved that independent set or equivalently clique is hard for first level of this hierarchy w 1 thus according to their conjecture clique has no fixed parameter tractable algorithm moreover this result provides basis for proofs of w 1 hardness of many other problems and thus serves as an analogue of cook levin theorem for parameterized complexity showed that finding vertex cliques cannot be done in time unless exponential time hypothesis fails again this provides evidence that no fixed parameter tractable algorithm is possible although problems of listing maximal cliques or finding maximum cliques are unlikely to be fixed parameter tractable with parameter they may be fixed parameter tractable for other parameters of instance complexity for instance both problems are known to be fixed parameter tractable when parametrized by degeneracy of input graph hardness of approximation thumb a graph of compatibility relations among 2 bit samples of 3 bit proof strings each maximal clique triangle in this graph represents all ways of sampling a single 3 bit string proof of inapproximability of clique problem involves induced subgraphs of analogously defined graphs for larger numbers of bits weak results hinting that clique problem might be hard to approximate have been known for a long time observed that because of fact that clique number takes on small integer values and is np hard to compute it cannot have a fully polynomial time approximation scheme if too accurate an approximation were available rounding its value to an integer would give exact clique number however little more was known until early 1990s when several authors began to make connections between approximation of maximum cliques and probabilistically checkable proofs they used these connections to prove hardness of approximation results for maximum clique problem after many improvements to these results it is now known that for every real number there can be no polynomial time algorithm that approximates maximum clique to within a factor better than unless p np showed inapproximability for this ratio using a stronger complexity theoretic assumption inequality of np and described more precisely inapproximability ratio but with an even stronger assumption construction weakening its assumption to p np rough idea of these inapproximability results is to form a graph that represents a probabilistically checkable proof system for an np complete problem such as boolean satisfiability problem in a probabilistically checkable proof system a proof is represented as a sequence of bits an instance of satisfiability problem should have a valid proof if and only if it is satisfiable proof is checked by an algorithm that after a polynomial time computation on input to satisfiability problem chooses to examine a small number of randomly chosen positions of proof string depending on what values are found at that sample of bits checker will either accept or reject proof without looking at rest of bits false negatives are not allowed a valid proof must always be accepted however an invalid proof may sometimes mistakenly be accepted for every invalid proof probability that checker will accept it must be low to transform a probabilistically checkable proof system of this type into a clique problem one forms a graph with a vertex for each possible accepting run of proof checker that is a vertex is defined by one of possible random choices of sets of positions to examine and by bit values for those positions that would cause checker to accept proof two vertices are adjacent in this graph if corresponding two accepting runs see same bit values at every position they both examine each valid or invalid proof string corresponds to a clique set of accepting runs that see that proof string and all maximal cliques arise in this way one of these cliques is large if and only if it corresponds to a proof string that many proof checkers accept if original satisfiability instance is satisfiable it will have a valid proof string one that is accepted by all runs of checker and this string will correspond to a large clique in graph however if original instance is not satisfiable then all proof strings are invalid each proof string has only a small number of checker runs that mistakenly accept it and all cliques are small therefore if one could distinguish in polynomial time between graphs that have large cliques and graphs in which all cliques are small or if one could accurately approximate clique problem then applying this approximation to graphs generated from satisfiability instances would allow satisfiable instances to be distinguished from unsatisfiable instances however this is not possible unless p np this reduction is originally due to and used in all subsequent inapproximability proofs proofs differ in strengths and details of probabilistically checkable proof systems that they rely on notes references surveys and textbooks popular press research articles originally presented at 1992 symposium on foundations of computer science originally presented at 1992 symposium on foundations of computer science source code category np complete problems category computational problems in graph theory fr clique theorie des probleme de la clique